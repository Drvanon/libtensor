#ifndef __LIBTENSOR_TENSOR_OPERATION_HANDLER_I_H
#define __LIBTENSOR_TENSOR_OPERATION_HANDLER_I_H

#include "exception.h"
#include "permutation.h"
#include "tensor_i.h"

namespace libtensor {

/**	\brief Interface for handlers of events generated by a %tensor operation
	\ingroup tensor

	\param _T Tensor element type.
**/
template<typename _T>
class tensor_operation_handler_i {
public:
	typedef _T element_t;

public:
	virtual element_t *req_dataptr(const permutation &p) throw(exception) = 0;

	virtual const element_t *req_const_dataptr(const permutation &p)
		throw(exception) = 0;

	virtual element_t *req_range_dataptr(const permutation &p, const index_range &r)
		throw(exception) = 0;

	virtual const element_t *req_range_const_dataptr(const permutation &p,
		const index_range &r) throw(exception) = 0;

	virtual void ret_dataptr(const element_t *p) throw(exception) = 0;
};

} // namespace libtensor

#endif // __LIBTENSOR_TENSOR_OPERATION_HANDLER_I_H


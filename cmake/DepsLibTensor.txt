#
#	Set up third-party dependencies for libtensor
#

#	Detect whether the system is POSIX-compliant
#
if(UNIX)
	add_definitions(-DPOSIX)
endif(UNIX)

#	Detect the Intel compiler
#
string(REGEX MATCH icpc IS_ICPC ${CMAKE_CXX_COMPILER})

#
#	Detect the linear algebra library
set(CMAKE_MODULE_PATH_SAVED ${CMAKE_MODULE_PATH})
set(CMAKE_MODULE_PATH ${LIBTENSOR_DIR}/cmake)
find_package(MKL)
find_package(GSL)
find_package(CBLAS)
find_package(LAPACK)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH_SAVED})

#
#	Set up compilation flags and paths
if(IS_ICPC AND MKL_FOUND)
	add_definitions(-DUSE_MKL)
	include_directories(${MKL_INCLUDE_PATH})
	set(BLAS_LIBS ${MKL_LIBRARIES})
	message(STATUS "Using MKL: " ${MKL_INCLUDE_PATH})
else(IS_ICPC AND MKL_FOUND)
if(GSL_FOUND AND LAPACK_FOUND)
	add_definitions(-DUSE_GSL)
	add_definitions(-DUSE_LAPACK)
	include_directories(${GSL_INCLUDE_PATH})
	set(BLAS_LIBS ${GSL_LIBRARIES})
	set(LAPACK_LIBS ${LAPACK_LIBRARY_PATH})
	message(STATUS "Using GSL: " ${GSL_INCLUDE_PATH})
	message(STATUS "Using LAPACK: " ${LAPACK_LIBRARY_PATH})
else(GSL_FOUND AND LAPACK_FOUND)
if(CBLAS_FOUND)
	add_definitions(-DUSE_CBLAS)
	include_directories(${CBLAS_INCLUDE_PATH})
	set(BLAS_LIBS ${CBLAS_LIBRARIES})
	message(STATUS "Using CBLAS: " ${CBLAS_INCLUDE_PATH})
else(CBLAS_FOUND)
	message(FATAL_ERROR "Could not find a BLAS library")
endif(CBLAS_FOUND)
if(CBLAS_FOUND)
if(LAPACK_FOUND)
	add_definitions(-DUSE_LAPACK)
	set(LAPACK_LIBS ${LAPACK_LIBRARY_PATH})
	message(STATUS "Using LAPACK: " ${LAPACK_LIBRARY_PATH})
else(LAPACK_FOUND)
	message(FATAL_ERROR "Could not find a LAPACK library")
endif(LAPACK_FOUND)
endif(CBLAS_FOUND)
endif(GSL_FOUND AND LAPACK_FOUND)
endif(IS_ICPC AND MKL_FOUND)

#	Libtensor dependencies (libraries)
#
set(LIBTENSOR_DEP_LIBS ${LAPACK_LIBS} ${BLAS_LIBS})


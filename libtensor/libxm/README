libxm
=====

Libxm is a library designed to provide efficient contractions of huge (on order
of terabytes) disk-based block-tensors with arbitrary symmetry and sparsity.
When tensors are stored on hard disk they are asynchronously prefetched to main
memory for fast access. Libxm uses a new algorithm where tensor contractions
are reformulated as multiplications of big matrices done in batches. Optimized
BLAS implementation is used to perform actual matrix multiplications which can
be efficiently accelerated using multiple GPUs or other accelerators like Intel
Xeon Phi. Libxm reaches close to peak performance even in cases where data size
is much larger than the available amount of fast random access memory. For very
large problems libxm shows considerable speedups (10x or more) compared to
similar tensor contraction codes.

To compile libxm you need a sane POSIX environment, an efficient BLAS library,
and an ANSI C complaint compiler. See Makefile for sample compiler flags and
configurations.

See benchmark.c file for sample code using libxm. To start using libxm in your
project simply add xm.c to the project files and include xm.h to get function
definitions. Detailed API documentation can be found in xm.h file.


Features
--------

 - Speed-up tensor contractions with GPU(s) and accelerators
 - Arbitrary symmetry and sparsity of tensors
 - Support for very large tensors backed by hard disk storage
 - Computations in single and double precision
 - Support for complex numbers
 - Very simple API


Source code overview
--------------------

   xm.h - public API header with documentation
   xm.c - main libxm implementation file
   alloc.c/alloc.h - disk-backed allocator for large tensors
   aux.c/aux.h - optional auxiliary functions for tensor creation
   benchmark.c - sample benchmarks
   test.c - facilities for randomized testing


Who uses libxm
--------------

 - libxm is integrated with Q-Chem package to accelerate quantum chemistry
   calculations
